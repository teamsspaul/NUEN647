#!/usr/bin/env python3

#########################################################################
######################## Import Packages ################################
#########################################################################

import time
start_time = time.time()
import Functions_Plot as f
import pandas as pd

#########################################################################
######################## Data Frame Work ################################
#########################################################################

#Load up dataframe
df=pd.read_csv('U235_All_Calcs.csv',sep=',',index_col=False)
ColumnNames=df.columns.values #Probably wont use

#Set X and Y values for plotting ['Error' 'Emt' 'Eme' 'E0']
#Error will get more complicated, for now its only one isotope

X='Emt'    #Should be one of the variables
Y='Error'  #Should be an error term

#Three variables that I am...well varying
Variables=["Emt","Eme","E0"]
Printing=["%.2f","%.3e","%.4f"]

XScale="linear"     # 'linear' or 'log'
Xlabel='Emt'  # X label
YScale="linear"  # 'linear' or 'log'
Ylabel='Error'        


#Remove the one variable I am looking at, group by others
del Printing[Variables.index(X)]
Variables.remove(X)

UniqueOther1=pd.unique(df[Variables[0]])
UniqueOther2=pd.unique(df[Variables[1]])

#Set up plot
fig=f.plt.figure(figsize=f.FigureSize)
ax=fig.add_subplot(111)

Check=0
for U1 in UniqueOther1:
    for U2 in UniqueOther2:
        Label=Variables[0]+" "+Printing[0] % U1 +\
              " "+Variables[1]+" "+Printing[1] % U2
        #Take all rows with U1 (filter)
        dfHold=df[df[Variables[0]] == U1]
        #Take all rows with U2 (filter again)
        dfHold=dfHold[dfHold[Variables[1]] == U2]
        Error=dfHold[Y].values
        Xplot=dfHold[X].values
        (fit,ax)=f.plot(Xplot,Error,ax,Check,Label,
                        fig,Ylabel,Xlabel,XScale,YScale)
        Check=Check+1

ax=f.Legend(ax)
f.plt.savefig('Test.pdf')

#########################################################################
######################## Time to Execute ################################
#########################################################################

print("--- %s seconds ---" % (time.time() - start_time))
