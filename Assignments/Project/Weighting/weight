#!/usr/bin/env python3

#########################################################################
######################## Import Packages ################################
#########################################################################

import time
start_time = time.time()
import Functions as f
from scipy import interpolate
from scipy import integrate
from scipy.integrate import trapz

#########################################################################
########################## Calculations #################################
#########################################################################

#########################################################
############### Import X-Section Data ###################
#########################################################

#Get list of csv files with X-section information
Names=f.GETcsvFiles("X_Sections")
Names=["U_235_92_cov.csv"]

#Loop through all the X-sections I got
for Name in Names:

    Element=Name.split('_')[0]
    Isotope=Name.split('_')[1]
    Protons=Name.split('_')[2]
    Reaction=Name.split('_')[3].split('.')[0]
    
    Xsec = f.np.genfromtxt('X_Sections/'+Name,delimiter=',')
    #Set energy, and convert from MeV to ev
    E=f.copy.copy(Xsec[:,0])*10**6

    #Calculate Flux
    Emt=0.50       #Max thermal energy in ev
    Eme=1e5        #Max epithermal energy in ev
    E0=0.090       #Thermal average in ev (1045 K)
    Ef=1.35e6      #Fission average in ev
    
    F=f.flux(E,Emt,Eme,E0,Ef)

    #Make function for X-Section(E) * Flux(E)
    X_phi=interpolate.interp1d(E,F*Xsec[:,1],
                               fill_value=0,bounds_error=False)
    #Perform the integral for X-Section(E) * Flux(E)
    X_int=integrate.trapz(X_phi(E),E)
    #Perform the integral for Flux(E)
    Phi_int=integrate.trapz(F,E)
    #Average X-section value
    Avg=X_int/Phi_int

    #Find TAPE9's X-section value for comparison
    TAPE9_X=f.LoopTAPE(Protons,Isotope)

    print(Protons+Element+Isotope+' Average: %.3e' % Avg
          +', TAPE Value: '+TAPE9_X)
    
    #########################################################
    ################## X-sec Plotting #######################
    #########################################################

    fig=f.plt.figure(figsize=f.FigureSize)
    ax=fig.add_subplot(111)
    label="$\sigma_a$ "+Element+"$^{"+Isotope+"}$"
    Ylabel='$\sigma$(E)'    # Y label
    
    (fig,ax)=f.plot(E,Xsec[:,1],ax,'blue',label,fig,Ylabel)
    #f.Legend(ax)
    if 'a' in Reaction:
        f.plt.savefig('X_Sections/X_'+Element+'_'+Isotope+'.pdf')
    #if 'cov' in Reaction:
    #    f.plt.savefig('X_Sections/Var_'+Element+'_'+Isotope+'.pdf')
        
#########################################################
################## Flux Plotting ########################
#########################################################

fig=f.plt.figure(figsize=f.FigureSize)
ax=fig.add_subplot(111)
label=""
Ylabel='$\phi$(E)$\cdot$E Normalized (n/cm$^{2}$s)'    # Y label
(fig,ax)=f.plot(E,(F*E)/f.np.sum(F),ax,'blue',label,fig,Ylabel)
ax=f.Legend(ax)
f.plt.savefig('Flux_Spectra.pdf')

##################################################################
######################## Time to Execute #########################
##################################################################

print("--- %s seconds ---" % (time.time() - start_time))
