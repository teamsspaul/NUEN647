#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import FUN as fun


x=5;alpha=1;beta=2;NumofC=10
alpha=10-1;beta=1/0.1
################################################################
#################### Monte Calculations ########################
################################################################

N=100000  #Samples

RandomNumbers=fun.Rvdc(N,2)    #Halton sequence
Samples=fun.gammad.ppf(q=RandomNumbers,a=alpha+1,
                            scale=1/beta)
#SamplesSigma=fun.np.random.gamma(shape=alpha+1,scale=1/beta,size=N)

MSolution=[] #Monte Solution
for i in range(0,len(Samples)):
    MSolution.append(fun.Fnear(Samples[i]*x))


################################################################
############### Deterministic Calculations #####################
################################################################

cn=[]
for n in range(0,NumofC):
    cn.append(fun.Determine_cn(n,alpha,beta,x))

Var=0
for n in range(1,NumofC):
    Coef=fun.gammaf(n+alpha+1)/(fun.gammaf(alpha+1)*fun.fact(n))
    Var=Var+Coef*(cn[n]**2)

DSolution=[] #Deterministic Solution with Monte Sampling
for i in range(0,len(Samples)):
    DSolution.append(fun.PolyChaos(cn,alpha,Samples[i]*beta))


################################################################
################## Printing and Plotting #######################
################################################################

fun.Print("Monte",MSolution)
fun.Print("Chaos",[cn[0],Var])
fun.Print("Monte+Chaos",DSolution)

#Plot the data, and plot fitted PDF
Nbins=100 #Hist Plot
filename="meanx_"+str(x)+".pdf"
Xlabel="Distribution at x = "+str(x)
(n,bins,ax,fig)=fun.HIST(Xlabel,DSolution,Nbins,N)
#(ax,fig)=fun.HISTDataToPDF(n,bins,ax,fig)
fun.plt.savefig(filename)

###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
