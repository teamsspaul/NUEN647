#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import FUN as fun
from uncertainties import ufloat
from uncertainties.umath import *
from uncertainties import unumpy as unp

################################################################
######################## Set up ################################
################################################################
NumofC=6

output=open("All_Calcs.csv","w")
print("alpha,beta,SumErr",file=output)

#Loop through all possibilities
alphaL=fun.np.linspace(1,20,3);
betaL=fun.np.linspace(1,20,3);
xL=[1,1.5,3,5];
Measured=[0.201131,0.110135,0.0228748,0.0032849]
MeasuredVar=[0.001,0.001,0.001,0.001]
Prior=[0.166714961646,0.090024688979,0.0192062954143,0.00362613412053]
PriorVar=[0.00541820218281,0.00303591212914,0.000475125069726,5.14761627202e-05]
                                    
################################################################
##################### Brute Force ##############################
################################################################

SumErrs=[]
for alpha in alphaL:
    for beta in betaL:
        Error=0
        for i in range(0,len(xL)):
            x=xL[i]

            cn=[]
            for n in range(0,NumofC):
                cn.append(fun.Determine_cn(n,alpha,beta,x))

            Var=0
            for n in range(1,NumofC):
                Coef=fun.gammaf(n+alpha+1)/(fun.gammaf(alpha+1)*fun.fact(n))
                Var=Var+Coef*(cn[n]**2)

            
            Error=Error+abs(c0-Measured[i])/Measured[i]
        SumErrs.append(Error)
        print(str(alpha)+","+str(beta)+','+str(Error),file=output)


################################################################
#################### Find Minimum ##############################
################################################################

        
#Find minimium Summed Error
Min=min(SumErrs)
Count=0
for alpha in alphaL:
    for beta in betaL:
        if SumErrs[Count]==Min:
            print("Min of Summed Errors: %.2f, " % Min +
                  "alpha: %.3f, " % alpha +
                  'beta: %.3f, ' % beta)
            alpharun=alpha
            betarun=beta

        Count=Count+1

################################################################
################### Print Minimum ##############################
################################################################

for i in range(0,len(xL)):
    x=xL[i]
    alpha=alpharun;beta=betarun

    cn=[]
    for n in range(0,NumofC):
        cn.append(fun.Determine_cn(n,alpha,beta,x))

    Var=0
    for n in range(1,NumofC):
        Coef=fun.gammaf(n+alpha+1)/(fun.gammaf(alpha+1)*fun.fact(n))
        Var=Var+Coef*(cn[n]**2)

    fun.Print(x,"Chaos",[cn[0],Var])

print("")
###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
