#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import Functions as fun
from scipy.stats import norm
import lhsmdu
import numpy as np

################################################################
###################### Calculations ############################
################################################################

N=50
#RandN=fun.Rvdc(N,2);Name='Halton';Halton=True #Halton Sequence
l=lhsmdu.sample(1,N)  #Hyper cube sampling
RandN=l[0].A1;Name='LHS';Halton=False

#Generate Samples;        loc = mean; scale=STD
v=np.ones(N)*0.5
#mu=0.5;sigma=0.1;Param='v';v=norm.ppf(RandN,mu,sigma)
D=np.ones(N)*0.125
mu=0.125;sigma=0.03;Param='D';D=norm.ppf(RandN,mu,sigma)
w=np.ones(N)*0.1
#mu=0.1;sigma=0.05;Param='w';w=norm.ppf(RandN,mu,sigma)

NX=[51,101,201,251,301,351,401,451];Vary='x';Nt=[11];l=0
#Nt=[11,21,31,41,51,61];Vary='t';NX=[401];j=0

AllProbs=[];dxs=[]

for j in range(0,len(NX)):   #Loop over space
#for l in range(0,len(Nt)):    #Loop over time

    #Problem boundaries
    x=fun.np.linspace(0,10,NX[j])
    dx=x[1]-x[0]
    t=fun.np.linspace(0,5,Nt[l])
    dt=t[1]-t[0]

    RXNs=[];
    
    for i in range(0,N):
        #Build A
        A=fun.BuildA(v[i],D[i],w[i],dt,dx,NX[j])
        #Calculate QoI
        RXNRate=fun.SolveQoI(NX[j],Nt[l],x,t,A,dt,w[i])
        RXNs.append(RXNRate)

    #Find the probability of f being greater than 0.035
    PGreater=sum(i>0.035 for i in RXNs)/N

    try:
        if np.isnan(RXNRate):
            continue
    except TypeError:
        continue
    if(RXNRate<0 or RXNRate>100):
        print("Skip print fragile solve")
        continue

    AllProbs.append(PGreater)
    if Vary=='x':
        dxs.append(dx)
    elif Vary=='t':
        dxs.append(dt)

#Plot the data
fig = fun.plt.figure()
ax = fig.add_subplot(111)
(fig,ax)=fun.Plot(dxs,AllProbs,Param,fig,ax,'k--',Vary,Scaled=Halton)
filename=Name+'_'+Param+Vary+'.pdf'
handles,labels=ax.get_legend_handles_labels()
Lfont={'family':'monospace',
       'size':12}
ax.legend(handles,labels,loc='best',fontsize=12)
fun.plt.savefig(filename)


###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
