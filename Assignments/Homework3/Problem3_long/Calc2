#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import Functions as fun
import numpy as np

################################################################
###################### Calculations ############################
################################################################

N=1000;tend=5;xend=10;

output=open("output","w")
print("v,D,w,dt,dx,RXNRate",file=output)

NCount=1
while NCount<=N:
    
    #Generate Samples;        loc = mean; scale=STD
    v=np.random.uniform(0.5-0.5*0.1,0.5+0.5*0.1)
    D=np.random.uniform(0.125-0.125*0.1,0.125+0.125*0.1)
    w=np.random.uniform(0.1-0.1*0.1,0.1+0.1*0.1)
    dt=np.random.uniform(0.001,0.5)
    dx=np.random.uniform(0.001,0.5)
    
    NX=int(xend/dx)
    Nt=int(tend/dt)

    print("space_divs time_divisionts = "+str(NX*Nt)+" NCount = "+str(NCount))
    
    #Problem boundaries
    x=fun.np.linspace(0,xend,NX)
    dx=x[1]-x[0]
    t=fun.np.linspace(0,tend,Nt)
    dt=t[1]-t[0]

    #Build A
    A=fun.BuildA(v,D,w,dt,dx,NX)
    #Calculate QoI
    RXNRate=fun.SolveQoI(NX,Nt,x,t,A,dt,w)
    try:
        if np.isnan(RXNRate):
            continue
    except TypeError:
        continue
    if(RXNRate<0 or RXNRate>100):
        print("Skip print fragile solve")
        continue
    
    print(",".join([str(v),str(D),str(w),str(dt),str(dx),str(RXNRate)]),
          file=output)
    NCount=NCount+1

###################### Time To execute #################
output.close() #important or ORIGEN2 wont run 
print("--- %s seconds ---" % (time.time() - start_time))
