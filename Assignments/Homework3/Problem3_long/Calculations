#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import Functions as fun

################################################################
###################### Calculations ############################
################################################################

#Samples, X-1 bins, t-1 time steps
N=1;NX=101;Nt=11

#Problem boundaries
x=fun.np.linspace(0,10,NX)
dx=x[1]-x[0]
t=fun.np.linspace(0,5,Nt)
dt=t[1]-t[0]

#Generate Samples;        loc = mean; scale=STD
v=fun.np.random.normal(loc=0.5,scale=0.1,size=N)
D=fun.np.random.normal(loc=0.125,scale=0.03,size=N)
w=fun.np.random.normal(loc=0.1,scale=0.05,size=N)

#Build A
A=fun.BuildA(v,D,w,dt,dx,NX)

#Build Matrix with solutions
u=fun.np.zeros([NX,Nt])
for i in range(0,NX):
    if x[i]<=2.5:
        u[i,0]=1

#Solve the system
for i in range(1,len(t)):
    u[:,i] = fun.np.linalg.solve(A,u[:,i-1]*(1/dt))

    
#Integrate the system
Integral=fun.Integrate(u,5,6,x,t)
RXNRate=Integral*w

print(RXNRate)
###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
