#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import Functions as fun

x=0.5;alpha=10;beta=0.1;NumofC=10
print("For x = "+str(x))
################################################################
############### Deterministic Calculations #####################
################################################################

cn=[]
for n in range(0,NumofC):
    cn.append(fun.Determine_cn(n,alpha,beta,x))

Dphi=0 #Deterministic phi
for n in range(0,NumofC):
    Dphi=Dphi+cn[n]*fun.LagEval(n,alpha,beta*x)
print("Deterministic Calc mean is "+str(Dphi))
    
################################################################
#################### Monte Calculations ########################
################################################################

N=10000  #Samples
Nbins=60 #Hist Plot
#Nstrata=10
filename="mean2.pdf"

#RandomNumbers=fun.np.random.uniform(0,1,N)
#RandomNumbers=fun.Rstrat(N,Nstrata)  #strat sampling
#l=lhsmdu.sample(1,N)  #Hyper cube sampling
#RandomNumbers=l[0].A1
#RandomNumbers=fun.Rvdc(N,7)    #Halton sequence
#SamplesSigma=fun.gamma.ppf(RandomNumbers,0.1,10)
SamplesSigma=fun.np.random.gamma(shape=10,scale=0.1,size=N)

x=1
Mphi=[] #Monte Phi
for i in range(0,len(SamplesSigma)):
    Mphi.append(fun.PhiEval(x*SamplesSigma[i]))

print("Monte Calc mean is "+str(fun.mean(Mphi)))
print("")
#Plot the data, and plot fitted PDF
Xlabel="Distribution of flux"
(n,bins,ax,fig)=fun.HIST(Xlabel,Mphi,Nbins,N)
(ax,fig)=fun.HISTDataToPDF(n,bins,ax,fig)
fun.plt.savefig(filename)

print("")
###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
