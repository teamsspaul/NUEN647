#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import Functions as fun
from mpmath import expint

################################################################
######################## Function ##############################
################################################################

x=1;alpha=10;beta=0.1;NumofC=10
print("For x = "+str(x))
################################################################
#################### Monte Calculations ########################
################################################################

N=1000  #Samples
Nbins=60 #Hist Plot
#Nstrata=10
filename="For x = "+str(x)+".pdf"

#RandomNumbers=fun.np.random.uniform(0,1,N)
#RandomNumbers=fun.Rstrat(N,Nstrata)  #strat sampling
#l=lhsmdu.sample(1,N)  #Hyper cube sampling
#RandomNumbers=l[0].A1
RandomNumbers=fun.Rvdc(N,2)    #Halton sequence
SamplesSigma=fun.gammad.ppf(q=RandomNumbers,a=alpha+1,
                            scale=1/beta)
#SamplesSigma=fun.np.random.gamma(shape=alpha+1,scale=1/beta,size=N)

Mphi=[] #Monte Phi
for i in range(0,len(SamplesSigma)):
    Mphi.append(fun.PhiEval(x*SamplesSigma[i])) #Change me

print("Monte Calc mean is "+str(fun.mean(Mphi)))
print("Monte Calc Variance is "+str(fun.variance(Mphi)))
print("")
#Plot the data, and plot fitted PDF
Xlabel="Distribution of flux at x="+str(x)
(n,bins,ax,fig)=fun.HIST(Xlabel,Mphi,Nbins,N)
#(ax,fig)=fun.HISTDataToPDF(n,bins,ax,fig)
fun.plt.savefig(filename)

################################################################
############### Deterministic Calculations #####################
################################################################

cn=[]
for n in range(0,NumofC):
    cn.append(fun.Determine_cn(n,alpha,beta,x))
quit()
    
Var=0
for n in range(1,NumofC):
    Coef=fun.gammaf(n+alpha+1)/(fun.gammaf(alpha+1)*fun.fact(n))
    Var=Var+Coef*(cn[n]**2)

Dphi=[]
for i in range(0,len(SamplesSigma)):
    Dphi.append(fun.PolyChaos(cn,alpha,SamplesSigma[i]*beta)) #change me


print("The mean from C_0 is given by "+str(cn[0]))
print("The variance from the same method is given by "+str(Var))
print("")
print("The mean from sampling with chaos "+str(fun.mean(Dphi)))
print("The variance from the same method "+str(fun.variance(Dphi)))

print("")

###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
