#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################

import time
start_time = time.time()
import Functions as fun

################################################################
###################### Calculations ############################
################################################################

#Samples, X-1 bins, t-1 time steps
N=1;NX=101;Nt=11

#Problem boundaries
x=fun.np.linspace(0,10,NX)
dx=x[1]-x[0]
t=fun.np.linspace(0,5,Nt)
dt=t[1]-t[0]

#Generate Samples;        loc = mean; scale=STD
#v=fun.np.random.normal(loc=0.5,scale=0.1,size=N)
v=[0.5,0.5];#dp=v[1]-v[0];mu=0.5;sigma=0.1
#D=fun.np.random.normal(loc=0.125,scale=0.03,size=N)
D=[0.125,0.125];#dp=D[1]-D[0];mu=0.125;sigma=0.03
#w=fun.np.random.normal(loc=0.1,scale=0.05,size=N)
w=[0.1,0.15];dp=w[1]-w[0];mu=0.1;sigma=0.05

RXNs=[];
for i in range(0,2):
    #Build A
    A=fun.BuildA(v[i],D[i],w[i],dt,dx,NX)
    #Calculate QoI
    RXNRate=fun.SolveQoI(NX,Nt,x,t,A,dt,w[i])
    RXNs.append(RXNRate)
    
Scaled=((RXNs[1]-RXNs[0])/(dp))*mu
Index=((RXNs[1]-RXNs[0])/(dp))*sigma
print(Scaled,Index,dx,dt)



#Plot the data, and plot fitted PDF
fun.Plot(x,y,'linear')
plt.savefig('scaled.pdf')
fun.Plot(x,y,'index.pdf','linear')
plt.savefig('index.pdf')


###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
