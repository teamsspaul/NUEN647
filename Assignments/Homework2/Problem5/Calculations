#!/usr/bin/env python3

################################################################
##################### Import packages ##########################
################################################################
import numpy as np
import time
import copy
import scipy.special as sps
import matplotlib.pyplot as plt
plt.rcParams["font.family"] = "monospace"
import matplotlib
matplotlib.rc('text',usetex=True)
matplotlib.rcParams['text.latex.preamble']=[r"\usepackage{amsmath}"]
start_time = time.time()

################################################################
######################### Functions ############################
################################################################

def Sol1(l1,V,U,B,Us):
    A3=(U+V-U*V)**(1/B-1)
    Vn=(-l1/A3)*(Us/U)+1
    return(Vn)

def Sol2(l1,V,U,B,Us):
    A1=U*(V-1)
    A2=(l1**B)*((U*(V-1)-V)**B)
    A3=(V-1)**B
    A4=(Us**B)/(U**B)
    Vn=A1-(A2/A3)*A4
    return(Vn)

def Switch(Solution1):
    if Solution1:
        Solution1=False
    else:
        Solution1=True
    return(Solution1)

################################################################
##################### Calculations #############################
################################################################

fig=plt.figure()
ax=fig.add_subplot(111)
ax.set_xlabel(r'$\boldsymbol{x}$',fontsize=18)
ax.set_ylabel(r'\textbf{y}',fontsize=18)
ax.grid(alpha=0.8,color='black',linestyle='dotted')

B=3.826659

for i in range(0,1000):
    print("i is: "+str(i))
    l1=np.random.uniform(0,1)
    l2=np.random.uniform(0,1)

    U=(1-l2)**B
    Us=(1-l2)

    error=100

    count=0
    V=(1-l1)**B
    Solution1=True
    while(error>0.1):
        if Solution1:
            Vn=Sol1(l1,V,U,B,Us)
        else:
            Vn=Sol2(l1,V,U,B,Us)
        count2=0
        if(isinstance(Vn,complex) or Vn.real<0):
            if Solution1:
                Vn=Sol2(l1,V,U,B,Us)
            else:
                Vn=Sol1(l1,V,U,B,Us)
            if(not isinstance(Vn,complex) and not Vn.real<0):
                Solution1=Switch(Solution1)
            
            while(isinstance(Vn,complex) or Vn.real<0):
                V=(1-np.random.uniform(0,1))**B
                if count2<100:
                    Vn=Sol1(l1,V,U,B,Us)
                elif count2<200:
                    Vn=Sol2(l1,V,U,B,Us)
                elif count2>=200:
                    Vn=(1-np.random.uniform(0,1))**B
                count2=count2+1
        if count2<100:
            Solution1=True
            error=abs(V-Vn)/Vn
        elif count2<200:
            Solution1=False
            error=abs(V-Vn)/Vn
        elif count2>=200:
            print("reached 200 iterations")
            error=0
        V=copy.copy(Vn)
    
        if count==1000:
            print("Did not converge after 1000")
            V=(1-np.random.uniform(0,1))**B
        count=count+1

    W=1-V**(1/B)
    x=(2**0.5)*sps.erfinv(2*l1-1)
    y=(2**0.5)*sps.erfinv(2*W-1)
    ax.plot(x,y,'ko',markersize=5)

plt.savefig('P5.pdf')
